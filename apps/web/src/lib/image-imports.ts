/**
 * Auto-generated image import map
 * Generated by Asset Gardener on 2025-09-13T06:24:11.113Z
 * 
 * This file provides optimized image variants for responsive loading.
 * Do not edit manually - it will be overwritten on next optimization.
 */

export interface ImageVariant {
  original?: string;
  webp?: string;
  avif?: string;
}

export interface ImageVariants {
  thumbnail: ImageVariant;
  small: ImageVariant;
  medium: ImageVariant;
  large: ImageVariant;
  xlarge: ImageVariant;
  original: ImageVariant;
}

export interface OptimizedImage {
  original: string;
  variants: ImageVariants;
  metadata: {
    baseName: string;
    relativePath: string;
  };
}

export const optimizedImages: Record<string, OptimizedImage> = {
  "logo": {
    "original": "apps\\web\\public\\images\\logo.png",
    "variants": {
      "original": {
        "original": "/images/logo.png"
      },
      "thumbnail": {
        "webp": "/optimized/logo-thumbnail.webp",
        "avif": "/optimized/logo-thumbnail.avif"
      },
      "small": {
        "webp": "/optimized/logo-small.webp",
        "avif": "/optimized/logo-small.avif"
      },
      "medium": {
        "webp": "/optimized/logo-medium.webp",
        "avif": "/optimized/logo-medium.avif"
      },
      "large": {
        "webp": "/optimized/logo-large.webp",
        "avif": "/optimized/logo-large.avif"
      },
      "xlarge": {
        "webp": "/optimized/logo-xlarge.webp",
        "avif": "/optimized/logo-xlarge.avif"
      }
    },
    "metadata": {
      "baseName": "logo",
      "relativePath": "apps\\web\\public\\images\\logo.png"
    }
  },
  "heroBanner": {
    "original": "apps\\web\\public\\images\\hero-banner.jpg",
    "variants": {
      "original": {
        "original": "/images/hero-banner.jpg"
      },
      "thumbnail": {
        "webp": "/optimized/hero-banner-thumbnail.webp",
        "avif": "/optimized/hero-banner-thumbnail.avif"
      },
      "small": {
        "webp": "/optimized/hero-banner-small.webp",
        "avif": "/optimized/hero-banner-small.avif"
      },
      "medium": {
        "webp": "/optimized/hero-banner-medium.webp",
        "avif": "/optimized/hero-banner-medium.avif"
      },
      "large": {
        "webp": "/optimized/hero-banner-large.webp",
        "avif": "/optimized/hero-banner-large.avif"
      },
      "xlarge": {
        "webp": "/optimized/hero-banner-xlarge.webp",
        "avif": "/optimized/hero-banner-xlarge.avif"
      }
    },
    "metadata": {
      "baseName": "hero-banner",
      "relativePath": "apps\\web\\public\\images\\hero-banner.jpg"
    }
  },
  "ghostIcon": {
    "original": "apps\\web\\public\\images\\ghost-icon.svg",
    "variants": {
      "original": {
        "original": "/images/ghost-icon.svg"
      },
      "thumbnail": {},
      "small": {},
      "medium": {},
      "large": {},
      "xlarge": {}
    },
    "metadata": {
      "baseName": "ghost-icon",
      "relativePath": "apps\\web\\public\\images\\ghost-icon.svg"
    }
  },
  "productShowcase": {
    "original": "apps\\web\\src\\assets\\product-showcase.jpg",
    "variants": {
      "original": {
        "original": "/assets/product-showcase.jpg"
      },
      "thumbnail": {
        "webp": "/optimized/product-showcase-thumbnail.webp",
        "avif": "/optimized/product-showcase-thumbnail.avif"
      },
      "small": {
        "webp": "/optimized/product-showcase-small.webp",
        "avif": "/optimized/product-showcase-small.avif"
      },
      "medium": {
        "webp": "/optimized/product-showcase-medium.webp",
        "avif": "/optimized/product-showcase-medium.avif"
      },
      "large": {
        "webp": "/optimized/product-showcase-large.webp",
        "avif": "/optimized/product-showcase-large.avif"
      },
      "xlarge": {
        "webp": "/optimized/product-showcase-xlarge.webp",
        "avif": "/optimized/product-showcase-xlarge.avif"
      }
    },
    "metadata": {
      "baseName": "product-showcase",
      "relativePath": "apps\\web\\src\\assets\\product-showcase.jpg"
    }
  }
};

/**
 * Get the best image variant for a given size and format preference
 */
export function getImageVariant(
  imageKey: string, 
  size: keyof ImageVariants = 'medium',
  preferredFormat: 'webp' | 'avif' | 'original' = 'webp'
): string | undefined {
  const image = optimizedImages[imageKey];
  if (!image) return undefined;
  
  const variant = image.variants[size];
  if (!variant) return undefined;
  
  // Try preferred format first, then fallback to available formats
  return variant[preferredFormat] || 
         variant.webp || 
         variant.avif || 
         variant.original;
}

/**
 * Get all available sizes for an image
 */
export function getImageSizes(imageKey: string): Array<keyof ImageVariants> {
  const image = optimizedImages[imageKey];
  if (!image) return [];
  
  return Object.keys(image.variants) as Array<keyof ImageVariants>;
}

/**
 * Get responsive srcset for an image
 */
export function getResponsiveSrcSet(
  imageKey: string,
  format: 'webp' | 'avif' | 'original' = 'webp'
): string {
  const image = optimizedImages[imageKey];
  if (!image) return '';
  
  const srcsetEntries: string[] = [];
  
  Object.entries(image.variants).forEach(([size, variant]) => {
    const url = variant[format] || variant.webp || variant.original;
    if (url && size !== 'original') {
      // Map size names to approximate widths for srcset
      const widthMap: Record<string, number> = {
        thumbnail: 150,
        small: 400,
        medium: 800,
        large: 1200,
        xlarge: 1920
      };
      
      const width = widthMap[size];
      if (width) {
        srcsetEntries.push(`${url} ${width}w`);
      }
    }
  });
  
  return srcsetEntries.join(', ');
}
