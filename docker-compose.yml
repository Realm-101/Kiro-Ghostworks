version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: ghostworks-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ghostworks}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-ghostworks}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ghostworks-network

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: ghostworks-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ghostworks-network

  # FastAPI Backend Service
  api:
    build:
      context: .
      dockerfile: services/api/Dockerfile
    container_name: ghostworks-api
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-ghostworks}
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      - OPENTELEMETRY_ENDPOINT=http://otelcol:4317
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/api:/app
      - api_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ghostworks-network

  # Celery Worker Service
  worker:
    build:
      context: .
      dockerfile: services/worker/Dockerfile
    container_name: ghostworks-worker
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-ghostworks}
      - REDIS_URL=redis://redis:6379/0
      - OPENTELEMETRY_ENDPOINT=http://otelcol:4317
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    ports:
      - "${WORKER_METRICS_PORT:-8001}:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/worker:/app
      - worker_logs:/app/logs
    networks:
      - ghostworks-network

  # Next.js Frontend Application
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: ghostworks-web
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:${API_PORT:-8000}/api/v1
      - NODE_ENV=${NODE_ENV:-development}
    ports:
      - "${WEB_PORT:-3000}:3000"
    depends_on:
      - api
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    networks:
      - ghostworks-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ghostworks-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./infra/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/docker/nginx/conf.d:/etc/nginx/conf.d
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
      - api
    networks:
      - ghostworks-network

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ghostworks-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./infra/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ghostworks-network

  # Grafana Dashboards and Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ghostworks-grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/docker/grafana/provisioning:/etc/grafana/provisioning
      - ./infra/docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - ghostworks-network

  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: ghostworks-otelcol
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
    volumes:
      - ./infra/docker/otelcol/otelcol-config.yml:/etc/otelcol-contrib/otelcol-config.yml
    command: ["--config=/etc/otelcol-contrib/otelcol-config.yml"]
    depends_on:
      - prometheus
    networks:
      - ghostworks-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  api_logs:
  worker_logs:
  nginx_logs:

networks:
  ghostworks-network:
    driver: bridge